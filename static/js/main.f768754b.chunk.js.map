{"version":3,"sources":["components/GuessApples.js","pages/App.js","serviceWorker.js","index.js"],"names":["GuessApples","useState","text","setText","selected","setSelected","handleSubmit","val","newText","maps","Container","className","ListGroup","Item","Dropdown","Toggle","variant","size","id","toUpperCase","Menu","Object","keys","map","item","key","eventKey","onSelect","Form","Check","type","name","label","value","checked","onChange","e","target","Button","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f768754b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Container, Dropdown, Form, ListGroup } from \"react-bootstrap\";\nimport maps from \"./GuessApples.json\";\n\nimport \"./GuessApple.css\";\n\nconst GuessApples = () => {\n  const [text, setText] = useState(\"sha\");\n  const [selected, setSelected] = useState(\"1221\");\n\n  const handleSubmit = val => {\n    setSelected(val);\n    const newText = maps[text][val];\n    setText(newText);\n  };\n\n  return (\n    <Container>\n      <h2 className=\"pt-2 text-center\">Guess Apples</h2>\n      <ListGroup>\n        <ListGroup.Item className=\"text-center\">\n          <Dropdown>\n            <Dropdown.Toggle variant=\"link\" size=\"lg\" id=\"result\">\n              {text.toUpperCase()}\n            </Dropdown.Toggle>\n            <Dropdown.Menu>\n              {Object.keys(maps).map(item => (\n                <Dropdown.Item\n                  key={`reslut-menu-item-${item}`}\n                  eventKey={item}\n                  onSelect={key => setText(key)}\n                >\n                  {item.toUpperCase()}\n                </Dropdown.Item>\n              ))}\n            </Dropdown.Menu>\n          </Dropdown>\n        </ListGroup.Item>\n        <ListGroup.Item className=\"order-list\">\n          <Form.Check\n            type=\"radio\"\n            name=\"order\"\n            id=\"order-list-item-1\"\n            label=\"1221\"\n            value=\"1221\"\n            checked={selected === \"1221\"}\n            onChange={e => handleSubmit(e.target.value)}\n          />\n          <Form.Check\n            type=\"radio\"\n            name=\"order\"\n            id=\"order-list-item-2\"\n            label=\"3231\"\n            value=\"3231\"\n            checked={selected === \"3231\"}\n            onChange={e => handleSubmit(e.target.value)}\n          />\n          <Form.Check\n            type=\"radio\"\n            name=\"order\"\n            id=\"order-list-item-3\"\n            label=\"1223\"\n            value=\"1223\"\n            checked={selected === \"1223\"}\n            onChange={e => handleSubmit(e.target.value)}\n          />\n          <Form.Check\n            type=\"radio\"\n            name=\"order\"\n            id=\"order-list-item-4\"\n            label=\"123\"\n            value=\"123\"\n            checked={selected === \"123\"}\n            onChange={e => handleSubmit(e.target.value)}\n          />\n          <Form.Check\n            type=\"radio\"\n            name=\"order\"\n            id=\"order-list-item-5\"\n            label=\"13\"\n            value=\"13\"\n            checked={selected === \"13\"}\n            onChange={e => handleSubmit(e.target.value)}\n          />\n          <Form.Check\n            type=\"radio\"\n            name=\"order\"\n            id=\"order-list-item-6\"\n            label=\"31\"\n            value=\"31\"\n            checked={selected === \"31\"}\n            onChange={e => handleSubmit(e.target.value)}\n          />\n          <Form.Check\n            type=\"radio\"\n            name=\"order\"\n            id=\"order-list-item-7\"\n            label=\"33\"\n            value=\"33\"\n            checked={selected === \"33\"}\n            onChange={e => handleSubmit(e.target.value)}\n          />\n        </ListGroup.Item>\n        <ListGroup.Item className=\"text-center\">\n          <Button variant=\"primary\" onClick={() => handleSubmit(selected)}>\n            Submit\n          </Button>\n        </ListGroup.Item>\n      </ListGroup>\n    </Container>\n  );\n};\n\nexport default GuessApples;\n","import React from 'react';\n\nimport GuessApples from '../components/GuessApples';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App h-100\">\n      <GuessApples />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './pages/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}